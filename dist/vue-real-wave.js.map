{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///vue-real-wave.js","webpack:///webpack/bootstrap d831fd823d35d69d7a2d","webpack:///src/lib/vue-real-wave.vue","webpack:///./src/lib/index.js","webpack:///./src/lib/vue-real-wave.vue","webpack:///./src/lib/vue-real-wave.vue?41ae","webpack:///./src/lib/vue-real-wave.vue?19fb","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/snapsvg-cjs/dist/snap.svg-cjs.js","webpack:///./node_modules/eve/eve.js","webpack:///./src/lib/props.js","webpack:///./src/lib/vue-real-wave.vue?283d"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs__","__WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs___default","__WEBPACK_IMPORTED_MODULE_1__props__","props","data","svgId","_uid","waveLayer","waveLayerDatas","width","height","snap","waveCount","wallStyle","divStyle","paddingBottom","paddingTop","background","mounted","$slots","default","length","Error","$refs","wave","offsetWidth","offsetHeight","waveHeight","wavePosition","bottom","space","top","Math","ceil","waveGap","calWaveData","push","path","items","animate","attr","fill","waveColor","methods","waveto","x","y","gap","h","count","direction","offset","paths","oy","random","start","join","waveLayerCount","waveLayerData","k","_this","that","mina","easeinout","value","__WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__","install","Vue","options","component","window","use","injectStyle","ssrContext","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_vue_real_wave_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_baf7318a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_vue_real_wave_vue__","normalizeComponent","__vue_styles__","Component","content","locals","cssWithMappingToString","item","useSourceMap","cssMapping","btoa","sourceMapping","toComment","concat","sources","map","source","sourceRoot","sourceMap","unescape","encodeURIComponent","JSON","stringify","list","toString","mediaQuery","alreadyImportedModules","id","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","createStyleElement","styleElement","document","createElement","type","head","appendChild","obj","update","remove","querySelector","ssrIdKey","isProduction","noop","parentNode","removeChild","isOldIE","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","applyToTag","newObj","css","media","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","firstChild","hasDocument","DEBUG","listToStyles","getElementsByTagName","navigator","test","userAgent","toLowerCase","parentId","_isProduction","_options","newList","mayRemove","textStore","replacement","filter","Boolean","newStyles","part","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","render","staticRenderFns","_compiled","functional","_scopeId","hook","context","$vnode","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","existing","beforeCreate","_injectStyles","eve","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","isArray","Array","a","idgen","idprefix","ID","timer","now","sta","val","ds","b","dur","B","speed","spd","duration","stopit","pause","pdif","resume","frame","res","jj","end","easing","set","timeStamp","len","A","anim","linear","status","stop","time","getById","easeout","pow","easein","q","Q","sqrt","X","abs","Y","t","backin","backout","elastic","sin","PI","bounce","Snap","w","nodeType","wrap","is","apply","Element","glob","doc","String","e","Paper","$","el","text","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","key","has","Str","setAttributeNS","removeAttribute","createElementNS","isFinite","objectToString","slice","clone","constructor","repush","array","ii","splice","cacher","f","scope","postprocessor","newf","arg","arguments","args","cache","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","replace","all","params","split","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","getSomeDefs","node","ownerSVGElement","select","pdefs","defs","make","getSomeSVG","unit2px","getW","E","mgr","getBBox","getH","nam","out","svg","class","add2group","forEach","children","hub","paper","tagName","nodeName","anims","_","transform","g","mask","pattern","symbol","method","Fragment","frag","desc","proto","ownerDocument","body","version","dom","contentDocument","jsonFiller","win","toFloat","parseFloat","toInt","parseInt","mmax","max","mmin","min","round","colourRegExp","commaSpaces","separator","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","arr","paramCounts","u","z","TString","rgTransform","_unit2px","contains","compareDocumentPosition","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","firstDefined","json","att","parse","createDocumentFragment","full","div","innerHTML","fragment","ch","toJSON","on","nt","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","display","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","open","setRequestHeader","once","onreadystatechange","readyState","send","load","responseText","getOffset","elem","box","getBoundingClientRect","docElem","documentElement","clientTop","clientLeft","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getElementByPoint","target","canvas","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","matrix","fixids","urltest","it","uses","els","ids","oldid","old","fs","chld","elproto","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","prependTo","nextSibling","insertAfter","asPX","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","removeData","outerSVG","innerSVG","toDataURL","contents","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","URL","grad","gradient","attrs","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","deurl","clipIt","undefined","gradrg","seed","step","stops","tokens","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","setter","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","from","to","rect","circle","preload","onerror","src","img","onload","image","preserveAspectRatio","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","unshift","gradientLinear","gradientRadial","gradientUnits","setStops","fx","fy","clear","next","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","f2","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","Animation","each","begin","handler","cb","callbacker","aname","unbound","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","names","equal","Number","bUnit","supportsTouch","events","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","off","eventName","unbind","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","animation","inAnim","_attrs","_callback","curStatus","eq","fkeys","tkeys","keys","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","current_event","comaseparator","numsort","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","sort","_events","nes","es","sep","RegExp","exist","event","subname","cur","nts","inodes","funcs","prune","_vm","_h","$createElement","_c","_self","ref","staticClass","_t","_v","esExports"],"mappings":"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","file":"vue-real-wave.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vue-real-wave\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-real-wave\"] = factory();\n\telse\n\t\troot[\"vue-real-wave\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vue-real-wave\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-real-wave\"] = factory();\n\telse\n\t\troot[\"vue-real-wave\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__props__ = __webpack_require__(11);\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'vue-real-wave',\n  props: __WEBPACK_IMPORTED_MODULE_1__props__[\"a\" /* default */],\n  data: function data() {\n    return {\n      svgId: 'wall_' + this._uid,\n      waveLayer: [], // wave Object list.\n      waveLayerDatas: [], // wave data list.\n      width: 0,\n      height: 0,\n      snap: null,\n      // width / waveGap = waveCount\n      waveCount: 0,\n      wallStyle: {\n        height: 0\n      },\n      divStyle: {\n        paddingBottom: 0,\n        paddingTop: 0,\n        background: '#0aaacb'\n      }\n    };\n  },\n  mounted: function mounted() {\n    if (this.$slots.default.length > 1) throw new Error(' - Real Wave Component should contain exactly one root element.');\n\n    // Data init.\n    this.width = this.$refs.wave.offsetWidth;\n    this.height = this.$refs.wave.offsetHeight;\n    this.wallStyle.height = this.waveHeight * 2 + 40;\n    if (this.wavePosition === 'bottom') {\n      this.wallStyle.bottom = 0;\n      this.divStyle.paddingBottom = this.space + 'px';\n    } else {\n      this.wallStyle.top = 0;\n      this.divStyle.paddingTop = this.space + 'px';\n    }\n\n    // Snap init.\n    this.snap = __WEBPACK_IMPORTED_MODULE_0_snapsvg_cjs___default()('#' + this.svgId);\n    this.waveCount = Math.ceil(this.width / this.waveGap) + 1;\n\n    // Calculate all the wave data.\n    this.calWaveData();\n\n    // Set up the wave object.\n    for (var i in this.waveLayerDatas) {\n      this.waveLayer.push(this.snap.path(this.waveLayerDatas[i].items[0]));\n      this.animate(i);\n      this.waveLayer[i].attr({\n        fill: this.waveColor[i]\n      });\n    }\n  },\n\n  methods: {\n    // SVG path Generate function.\n    waveto: function waveto(x, y, gap, h, count, direction, offset) {\n      offset = offset || 0;\n      direction = direction || 1;\n      count = count || 1;\n\n      var paths = [];\n      var oy = y;\n      y = Math.random() * y;\n      var start = { x: x, y: y };\n      // bounder warning\n      if (y + direction * h < 0 || y - direction * h < 0) {\n        y = oy;\n      }\n      for (var i = 0; i < count; i++) {\n        paths.push('C' + (x + gap + offset) + ' ' + (y + direction * h) + ',' + (x + gap + 10 + offset) + ' ' + (y + direction * h) + ',' + (x + 2 * gap + offset) + ' ' + y + ' S' + (x + 3 * gap + offset) + ' ' + (y - direction * h) + ',' + (x + 4 * gap + offset) + ' ' + y);\n        x = x + 4 * gap;\n      }\n      return 'M' + start.x + ' ' + y + ' ' + paths.join(' ') + ' A95 95 0 0 1 0 100 Z';\n    },\n\n    // Calculator\n    calWaveData: function calWaveData() {\n      for (var i = 0; i < this.waveLayerCount; i++) {\n        var waveLayerData = { items: [] };\n        for (var k = 0; k < 3; k++) {\n          waveLayerData.items.push(this.waveto(0 + 50 * k, this.waveHeight * 2, this.waveGap, this.waveHeight * Math.random(), this.waveCount, k % 2 == 0 ? -1 : 1, Math.random() * 50));\n        }\n\n        this.waveLayerDatas.push(waveLayerData);\n      }\n    },\n\n    // Animation\n    animate: function animate(i) {\n      var _this = this;\n\n      var that = this;\n      this.waveLayer[i].animate({\n        d: this.waveLayerDatas[i].items[1]\n      }, 1500 + 500 * i, mina.easeinout, function () {\n        _this.waveLayer[i].animate({\n          d: _this.waveLayerDatas[i].items[2]\n        }, 1500 + 500 * i, mina.easeinout, function () {\n          _this.waveLayer[i].animate({\n            d: _this.waveLayerDatas[i].items[0]\n          }, 1500 + 500 * i, mina.easeinout, that.animate(i));\n        });\n      });\n    }\n  }\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__ = __webpack_require__(2);\n\n__WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__[\"a\" /* default */].install = function (Vue, options) {\n    Vue.component(__WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__[\"a\" /* default */].name, __WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__[\"a\" /* default */]);\n};\n// global 情况下 自动安装\nif (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(__WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__[\"a\" /* default */]);\n}\n// 导出模块\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__vue_real_wave_vue__[\"a\" /* default */]);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_vue_real_wave_vue__ = __webpack_require__(0);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_baf7318a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_vue_real_wave_vue__ = __webpack_require__(12);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(3)\n}\nvar normalizeComponent = __webpack_require__(8)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_vue_real_wave_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_baf7318a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_vue_real_wave_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(4);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(6)(\"f9c1f6aa\", content, true, {});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(5)(false);\n// imports\n\n\n// module\nexports.push([module.i, \".wave-div{position:relative;overflow:hidden;z-index:-2}.wave-div .wave-wall{z-index:-1;width:130%;height:45%;position:absolute;left:-30%}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(7)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nwindow.eve = __webpack_require__(10)\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            } catch (e) {\n                return null;\n            }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nmodule.exports = Snap\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.4 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.4\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event;\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n    // Undocumented. Debug only.\n    eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment.\n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    glob.eve = eve;\n    typeof module != \"undefined\" && module.exports ? module.exports = eve :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () { return eve; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : glob.eve = eve;\n})(typeof window != \"undefined\" ? window : this);\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  // The gap bewteen two wave, default 300px.\n  waveGap: {\n    type: Number,\n    default: 150\n  },\n  // height of wave\n  waveHeight: {\n    type: Number,\n    default: 40\n  },\n  // layer amount of wave. default 3\n  waveLayerCount: {\n    type: Number,\n    default: 4\n  },\n  // default color\n  waveColor: {\n    type: Array,\n    default: function _default() {\n      return ['#40ccd4', '#71d8df', 'rgba(256,256,256,.5)', 'rgba(256,256,256,1)'];\n    }\n  },\n  // position bottom\n  wavePosition: {\n    type: String,\n    default: 'bottom'\n  },\n  space: {\n    type: Number,\n    default: 50\n  }\n  // waveMode: uniform, center\n  // waveMode: {\n  //   type: String,\n  //   default: 'uniform',\n  // }\n});\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"wave\",staticClass:\"wave-div\",style:(_vm.divStyle)},[_vm._t(\"default\"),_vm._v(\" \"),_c('svg',{ref:\"wall\",staticClass:\"wave-wall\",style:(_vm.wallStyle),attrs:{\"id\":_vm.svgId}})],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// vue-real-wave.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d831fd823d35d69d7a2d","<template>\n  <div ref=\"wave\" class=\"wave-div\" :style=\"divStyle\">\n    <slot></slot>\n    <svg ref=\"wall\" class=\"wave-wall\" :id=\"svgId\" :style=\"wallStyle\">\n    </svg>\n  </div>\n</template>\n\n<script>\nimport Snap from 'snapsvg-cjs';\nimport props from './props';\nexport default {\n  name: 'vue-real-wave',\n  props: props,\n  data () {\n    return {\n      svgId: `wall_${this._uid}`,\n      waveLayer: [], // wave Object list.\n      waveLayerDatas: [], // wave data list.\n      width: 0,\n      height: 0,\n      snap: null,\n      // width / waveGap = waveCount\n      waveCount: 0,\n      wallStyle: {\n        height: 0,\n      },\n      divStyle: {\n        paddingBottom: 0,\n        paddingTop: 0,\n        background: '#0aaacb',\n      }\n    }\n  },\n  mounted(){\n    if (this.$slots.default.length > 1)\n      throw new Error(' - Real Wave Component should contain exactly one root element.');\n\n    // Data init.\n    this.width = this.$refs.wave.offsetWidth;\n    this.height = this.$refs.wave.offsetHeight;\n    this.wallStyle.height = this.waveHeight*2 + 40;\n    if (this.wavePosition === 'bottom'){\n      this.wallStyle.bottom = 0;\n      this.divStyle.paddingBottom = `${this.space}px`;\n    }else{\n      this.wallStyle.top = 0;\n      this.divStyle.paddingTop = `${this.space}px`;\n    }\n\n    // Snap init.\n    this.snap = Snap(`#${this.svgId}`);\n    this.waveCount = Math.ceil(this.width / this.waveGap) + 1;\n\n    // Calculate all the wave data.\n    this.calWaveData();\n\n    // Set up the wave object.\n    for (let i in this.waveLayerDatas){\n      this.waveLayer.push(this.snap.path(this.waveLayerDatas[i].items[0]));\n      this.animate(i);\n      this.waveLayer[i].attr({\n          fill: this.waveColor[i],\n      });\n    }\n  },\n  methods:{\n    // SVG path Generate function.\n    waveto(x,y,gap,h,count,direction,offset){\n      offset = offset || 0;\n      direction = direction || 1;\n      count = count || 1;\n\n      let paths = [];\n      let oy = y;\n      y = Math.random() * y;\n      let start = {x,y};\n      // bounder warning\n      if ((y + direction * h) < 0 || (y - direction*h) < 0){\n        y = oy;\n      }\n      for (let i=0;i<count;i++){\n        paths.push(`C${x+gap+offset} ${y + direction * h },${x+gap+10+offset} ${y+ direction * h},${x+2*gap+offset} ${y} S${x+3*gap+offset} ${y - direction*h},${x+4*gap+offset} ${y}`);\n        x = x + 4*gap;\n      }\n      return `M${start.x} ${y} ${paths.join(' ')} A95 95 0 0 1 0 100 Z`;\n    },\n    // Calculator\n    calWaveData(){\n      for (let i = 0; i < this.waveLayerCount; i++){\n        let waveLayerData = {items:[]};\n        for (let k = 0; k < 3; k++){\n          waveLayerData.items.push(this.waveto(0 + 50 * k,this.waveHeight * 2,this.waveGap\n                                    ,this.waveHeight * Math.random(),\n                                    this.waveCount,k%2==0?-1:1,Math.random()*50));\n        }\n\n        this.waveLayerDatas.push(waveLayerData);\n      }\n    },\n    // Animation\n    animate(i){\n      let that = this;\n      this.waveLayer[i].animate({\n        d: this.waveLayerDatas[i].items[1]\n      },1500 + 500*i,mina.easeinout,()=>{\n        this.waveLayer[i].animate({\n          d: this.waveLayerDatas[i].items[2]\n        },1500 + 500*i,mina.easeinout,() => {\n            this.waveLayer[i].animate({\n              d: this.waveLayerDatas[i].items[0]\n            },1500 + 500*i,mina.easeinout,that.animate(i));\n        });\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.wave-div{\n  position: relative;\n  overflow: hidden;\n  z-index: -2;\n\n  .wave-wall{\n    z-index:-1;\n    width:130%;\n    height:45%;\n    position:absolute;\n    left:-30%;\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/lib/vue-real-wave.vue","import vueRealWave from './vue-real-wave.vue'\nvueRealWave.install = (Vue, options) => {\n    Vue.component(vueRealWave.name, vueRealWave)\n}\n// global 情况下 自动安装\nif (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(vueRealWave)\n}\n// 导出模块\nexport default vueRealWave\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.js","function injectStyle (ssrContext) {\n  require(\"!!vue-style-loader!css-loader?minimize!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-baf7318a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./vue-real-wave.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./vue-real-wave.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./vue-real-wave.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-baf7318a\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./vue-real-wave.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/vue-real-wave.vue\n// module id = 2\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?minimize!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-baf7318a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./vue-real-wave.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"f9c1f6aa\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader!./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-baf7318a\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/lib/vue-real-wave.vue\n// module id = 3\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".wave-div{position:relative;overflow:hidden;z-index:-2}.wave-div .wave-wall{z-index:-1;width:130%;height:45%;position:absolute;left:-30%}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-baf7318a\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/lib/vue-real-wave.vue\n// module id = 4\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 5\n// module chunks = 0","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = require('./listToStyles')\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/addStylesClient.js\n// module id = 6\n// module chunks = 0","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/listToStyles.js\n// module id = 7\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = 8\n// module chunks = 0","window.eve = require('eve')\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            } catch (e) {\n                return null;\n            }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nmodule.exports = Snap\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/snapsvg-cjs/dist/snap.svg-cjs.js\n// module id = 9\n// module chunks = 0","// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.4 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.4\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event;\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n    // Undocumented. Debug only.\n    eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment.\n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    glob.eve = eve;\n    typeof module != \"undefined\" && module.exports ? module.exports = eve : typeof define === \"function\" && define.amd ? define(\"eve\", [], function () { return eve; }) : glob.eve = eve;\n})(typeof window != \"undefined\" ? window : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/eve/eve.js\n// module id = 10\n// module chunks = 0","export default {\n  // The gap bewteen two wave, default 300px.\n  waveGap: {\n    type: Number,\n    default: 150,\n  },\n  // height of wave\n  waveHeight: {\n    type: Number,\n    default: 40,\n  },\n  // layer amount of wave. default 3\n  waveLayerCount: {\n    type: Number,\n    default:4,\n  },\n   // default color\n  waveColor: {\n    type: Array,\n    default: function(){\n      return ['#40ccd4','#71d8df','rgba(256,256,256,.5)','rgba(256,256,256,1)'];\n    },\n  },\n  // position bottom\n  wavePosition: {\n    type: String,\n    default: 'bottom',\n  },\n  space: {\n    type: Number,\n    default: 50,\n  },\n  // waveMode: uniform, center\n  // waveMode: {\n  //   type: String,\n  //   default: 'uniform',\n  // }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/props.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"wave\",staticClass:\"wave-div\",style:(_vm.divStyle)},[_vm._t(\"default\"),_vm._v(\" \"),_c('svg',{ref:\"wall\",staticClass:\"wave-wall\",style:(_vm.wallStyle),attrs:{\"id\":_vm.svgId}})],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-baf7318a\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/lib/vue-real-wave.vue\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}